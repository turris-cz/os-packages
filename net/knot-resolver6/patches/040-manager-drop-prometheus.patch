Index: knot-resolver6-6.0.6/manager/knot_resolver_manager/server.py
===================================================================
--- knot-resolver6-6.0.6.orig/manager/knot_resolver_manager/server.py
+++ knot-resolver6-6.0.6/manager/knot_resolver_manager/server.py
@@ -19,7 +19,7 @@ from aiohttp.web_runner import AppRunner
 from typing_extensions import Literal
 
 import knot_resolver_manager.utils.custom_atexit as atexit
-from knot_resolver_manager import log, statistics
+from knot_resolver_manager import log
 from knot_resolver_manager.compat import asyncio as asyncio_compat
 from knot_resolver_manager.config_store import ConfigStore
 from knot_resolver_manager.constants import DEFAULT_MANAGER_CONFIG_FILE, PID_FILE_NAME, init_user_constants
@@ -185,7 +185,6 @@ class Server:
             }
         )
 
-    @statistics.async_timing_histogram(statistics.MANAGER_REQUEST_RECONFIGURE_LATENCY)
     async def _handler_config_query(self, request: web.Request) -> web.Response:
         """
         Route handler for changing resolver configuration
@@ -237,7 +236,7 @@ class Server:
 
     async def _handler_metrics(self, _request: web.Request) -> web.Response:
         return web.Response(
-            body=await statistics.report_stats(),
+            body="",
             content_type="text/plain",
             charset="utf8",
         )
@@ -515,10 +514,6 @@ async def start_server(config: Path = DE
         # can flush the buffer into the proper place
         await log.logger_init(config_store)
 
-        # With configuration on hand, we can initialize monitoring. We want to do this before any subprocesses are
-        # started, therefore before initializing manager
-        await statistics.init_monitoring(config_store)
-
         # prepare instance of the server (no side effects)
         server = Server(config_store, config)
 
Index: knot-resolver6-6.0.6/manager/pyproject.toml
===================================================================
--- knot-resolver6-6.0.6.orig/manager/pyproject.toml
+++ knot-resolver6-6.0.6/manager/pyproject.toml
@@ -20,7 +20,6 @@ jinja2 = "*"
 pyyaml = "*"
 supervisor = "*"
 typing-extensions = "*"
-prometheus-client = "*"
 
 [tool.poetry.group.dev.dependencies]
 poetry = "^1.4.2"
Index: knot-resolver6-6.0.6/manager/setup.py
===================================================================
--- knot-resolver6-6.0.6.orig/manager/setup.py
+++ knot-resolver6-6.0.6/manager/setup.py
@@ -21,7 +21,6 @@ package_data = \
 install_requires = \
 ['aiohttp',
  'jinja2',
- 'prometheus-client',
  'pyyaml',
  'supervisor',
  'typing-extensions']
Index: knot-resolver6-6.0.6/manager/knot_resolver_manager/kresd_controller/interface.py
===================================================================
--- knot-resolver6-6.0.6.orig/manager/knot_resolver_manager/kresd_controller/interface.py
+++ knot-resolver6-6.0.6/manager/knot_resolver_manager/kresd_controller/interface.py
@@ -10,7 +10,6 @@ from weakref import WeakValueDictionary
 from knot_resolver_manager.constants import kresd_config_file
 from knot_resolver_manager.datamodel.config_schema import KresConfig
 from knot_resolver_manager.exceptions import SubprocessControllerException
-from knot_resolver_manager.statistics import register_resolver_metrics_for, unregister_resolver_metrics_for
 from knot_resolver_manager.utils.async_utils import writefile
 
 logger = logging.getLogger(__name__)
@@ -100,7 +99,6 @@ class Subprocess(ABC):
     def __init__(self, config: KresConfig, kid: KresID) -> None:
         self._id = kid
         self._config = config
-        self._metrics_registered: bool = False
 
     async def start(self) -> None:
         # create config file
@@ -108,9 +106,6 @@ class Subprocess(ABC):
         await writefile(kresd_config_file(self._config, self.id), lua_config)
         try:
             await self._start()
-            if self.type is SubprocessType.KRESD:
-                register_resolver_metrics_for(self)
-                self._metrics_registered = True
         except SubprocessControllerException as e:
             kresd_config_file(self._config, self.id).unlink()
             raise e
@@ -126,8 +121,6 @@ class Subprocess(ABC):
         await self._restart()
 
     async def stop(self) -> None:
-        if self._metrics_registered:
-            unregister_resolver_metrics_for(self)
         await self._stop()
         await self.cleanup()
 
