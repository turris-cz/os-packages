Index: suricata-8.0.0/src/stream-tcp.c
===================================================================
--- suricata-8.0.0.orig/src/stream-tcp.c
+++ suricata-8.0.0/src/stream-tcp.c
@@ -503,6 +503,20 @@ void StreamTcpInitConfig(bool quiet)
                      "TCP stream engine memcaps.");
     }
 
+    const char *temp_stream_max_depth_str;
+    if (SCConfGet("stream.max-depth", &temp_stream_max_depth_str) == 1) {
+        if (ParseSizeStringU32(temp_stream_max_depth_str,
+                               &stream_config.max_depth) < 0) {
+            SCLogError("Error parsing "
+                       "stream.max_depth "
+                       "from conf file - %s.  Killing engine",
+                       temp_stream_max_depth_str);
+            exit(EXIT_FAILURE);
+        }
+    } else {
+        stream_config.max_depth = 0;
+    }
+
     if ((SCConfGetInt("stream.prealloc-sessions", &value)) == 1) {
         stream_config.prealloc_sessions = (uint32_t)value;
     } else {
@@ -5690,6 +5704,14 @@ int StreamTcpPacket (ThreadVars *tv, Pac
         {
             /* we can call bypass callback, if enabled */
             if (StreamTcpBypassEnabled()) {
+                PacketBypassCallback(p);
+            }
+        }
+        if (stream_config.max_depth>0 && p->flow && !(p->flow->flags & FLOW_ACTION_DROP) &&
+           (p->flow->todstbytecnt>stream_config.max_depth || p->flow->tosrcbytecnt>stream_config.max_depth))
+        {
+            /* we can call bypass callback, if enabled */
+            if (StreamTcpBypassEnabled()) {
                 PacketBypassCallback(p);
             }
         }
Index: suricata-8.0.0/src/stream-tcp.h
===================================================================
--- suricata-8.0.0.orig/src/stream-tcp.h
+++ suricata-8.0.0/src/stream-tcp.h
@@ -70,6 +70,7 @@ typedef struct TcpStreamCnf_ {
     bool midstream;
     bool async_oneside;
     bool streaming_log_api;
+    uint32_t max_depth;
     uint8_t max_syn_queued;
 
     uint32_t reassembly_depth;  /**< Depth until when we reassemble the stream */
