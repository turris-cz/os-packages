Index: suricata-8.0.0/src/flow.c
===================================================================
--- suricata-8.0.0.orig/src/flow.c
+++ suricata-8.0.0/src/flow.c
@@ -456,6 +456,13 @@ void FlowHandlePacketUpdate(Flow *f, Pac
             const IPV6Hdr *ip6h = PacketGetIPv6(p);
             FlowUpdateTtlTS(f, IPV6_GET_RAW_HLIM(ip6h));
         }
+#ifdef NFQ
+    if (!f->hw_address_src_known && p->nfq_v.hw_address_known){
+        SCLogDebug("setting src MAC address %02x:%02x:%02x:%02x:%02x:%02x", p->nfq_v.hw_address[0], p->nfq_v.hw_address[1], p->nfq_v.hw_address[2], p->nfq_v.hw_address[3], p->nfq_v.hw_address[4], p->nfq_v.hw_address[5]);
+        f->hw_address_src_known = 1;
+        memcpy(f->hw_address_src, p->nfq_v.hw_address, 6);
+    }
+#endif
     } else {
         f->tosrcpktcnt++;
         f->tosrcbytecnt += GET_PKT_LEN(p);
@@ -482,6 +489,13 @@ void FlowHandlePacketUpdate(Flow *f, Pac
             const IPV6Hdr *ip6h = PacketGetIPv6(p);
             FlowUpdateTtlTC(f, IPV6_GET_RAW_HLIM(ip6h));
         }
+#ifdef NFQ
+    if (!f->hw_address_dst_known && p->nfq_v.hw_address_known){
+        SCLogDebug("setting dst MAC address %02x:%02x:%02x:%02x:%02x:%02x", p->nfq_v.hw_address[0], p->nfq_v.hw_address[1], p->nfq_v.hw_address[2], p->nfq_v.hw_address[3], p->nfq_v.hw_address[4], p->nfq_v.hw_address[5]);
+        f->hw_address_dst_known = 1;
+        memcpy(f->hw_address_dst, p->nfq_v.hw_address, 6);
+    }
+#endif
     }
     if (f->thread_id[pkt_dir] == 0) {
         f->thread_id[pkt_dir] = (FlowThreadId)tv->id;
Index: suricata-8.0.0/src/flow.h
===================================================================
--- suricata-8.0.0.orig/src/flow.h
+++ suricata-8.0.0/src/flow.h
@@ -496,6 +496,12 @@ typedef struct Flow_
     uint32_t tosrcpktcnt;
     uint64_t todstbytecnt;
     uint64_t tosrcbytecnt;
+#ifdef NFQ
+    uint8_t hw_address_src[6];
+    uint8_t hw_address_src_known;
+    uint8_t hw_address_dst[6];
+    uint8_t hw_address_dst_known;
+#endif
 
     Storage storage[];
 } Flow;
Index: suricata-8.0.0/src/source-nfq.c
===================================================================
--- suricata-8.0.0.orig/src/source-nfq.c
+++ suricata-8.0.0/src/source-nfq.c
@@ -408,6 +408,7 @@ static int NFQSetupPkt (Packet *p, struc
     int ret;
     char *pktdata;
     struct nfqnl_msg_packet_hdr *ph;
+    struct nfqnl_msg_packet_hw *hwaddr;
 
     // Early release function -- will be updated once repeat
     // mode handling has been done
@@ -418,6 +419,13 @@ static int NFQSetupPkt (Packet *p, struc
         p->nfq_v.id = SCNtohl(ph->packet_id);
         p->nfq_v.hw_protocol = ph->hw_protocol;
     }
+    hwaddr = nfq_get_packet_hw(tb);
+    if (hwaddr != NULL) {
+        p->nfq_v.hw_address_known = 1;
+        memcpy(p->nfq_v.hw_address, hwaddr->hw_addr, 6);
+    } else {
+        p->nfq_v.hw_address_known = 0;
+    }
     /* coverity[missing_lock] */
     p->nfq_v.mark = nfq_get_nfmark(tb);
     if (nfq_config.mode == NFQ_REPEAT_MODE) {
Index: suricata-8.0.0/src/source-nfq.h
===================================================================
--- suricata-8.0.0.orig/src/source-nfq.h
+++ suricata-8.0.0/src/source-nfq.h
@@ -47,6 +47,8 @@ typedef struct NFQPacketVars_
     uint32_t ifi;
     uint32_t ifo;
     uint16_t hw_protocol;
+    uint8_t hw_address_known;
+    uint8_t hw_address[6];
 } NFQPacketVars;
 
 typedef struct NFQQueueVars_
Index: suricata-8.0.0/src/flow-util.h
===================================================================
--- suricata-8.0.0.orig/src/flow-util.h
+++ suricata-8.0.0/src/flow-util.h
@@ -27,13 +27,24 @@
 #include "flow.h"
 #include "stream-tcp-private.h"
 
+#ifdef NFQ
 #define RESET_COUNTERS(f)                                                                          \
     do {                                                                                           \
         (f)->todstpktcnt = 0;                                                                      \
         (f)->tosrcpktcnt = 0;                                                                      \
         (f)->todstbytecnt = 0;                                                                     \
         (f)->tosrcbytecnt = 0;                                                                     \
+	(f)->hw_address_src_known = 0;                                                             \
+	(f)->hw_address_dst_known = 0;                                                             \
     } while (0)
+#else
+#define RESET_COUNTERS(f) do { \
+        (f)->todstpktcnt = 0; \
+        (f)->tosrcpktcnt = 0; \
+        (f)->todstbytecnt = 0; \
+        (f)->tosrcbytecnt = 0; \
+    } while (0)
+#endif
 
 #define FLOW_INITIALIZE(f)                                                                         \
     do {                                                                                           \
