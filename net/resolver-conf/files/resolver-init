#!/bin/sh /etc/rc.common
#Copyright (C) 2016 CZ.NIC z.s.p.o. (http://www.nic.cz/)

SERVICE_USE_PID=0

DHCP_SCRIPT=/etc/resolver/dhcp_host_domain_ng.py
DHCP_SCRIPT_OLD=/etc/kresd/dhcp_host_domain_ng.sh
DHCPV6_SCRIPT="/etc/resolver/dhcpv6-host-domain.sh"

START=60

SECTIONFROM=""
SECTIONTO=""

CONFIGFROM=""
CONFIGTO=""
LAST_SERVICE=""

prefered_resolver() {
	local pref_resolver
	config_load resolver
	config_get pref_resolver common prefered_resolver
	echo -ne "$pref_resolver"
}

PREF_RESOLVER=$(prefered_resolver)

get_dhcp_script() {
        local config="$1"
        local tmp_dhcpscript

	#config_load dhcp
        config_get tmp_dhcpscript "$config" dhcpscript
        echo $tmp_dhcpscript
}

set_dhcp_script() {
	uci_set dhcp "@dnsmasq[0]" dhcpscript "$DHCP_SCRIPT"
	uci_set dhcp odhcpd leasetrigger "$DHCPV6_SCRIPT"
	uci_commit dhcp
}

remove_dhcp_script() {
	local script

	config_load dhcp
	script=$(config_foreach get_dhcp_script dnsmasq)

	if 	[ "$script" == "$DHCP_SCRIPT" ] || \
		[ "$script" == "$DHCP_SCRIPT_OLD" ]; \
	then
		echo $script
		uci_set dhcp "@dnsmasq[0]" dhcpscript ""
		uci_commit dhcp
	fi
}

run_dhcp_script() {
	local action resolver dynamic_domains
	action=$1
	resolver=$2

	# enable dynamic local domains
	config_load resolver
	config_get_bool dynamic_domains "common" dynamic_domains 0


	if 	[ "$dynamic_domains" == "1" ] && (    \
		[ "$action" == "reload" ] ||  \
		[ "$action" == "restart" ] || \
		[ "$action" == "start" ] );   \
	then
		sleep 1
		$DHCP_SCRIPT
		echo "Called $DHCP_SCRIPT"
	fi
}

run_cmd() {
	#Prefers given resolver only if it's installed
	local pref=$2	#unbound
	local param=$1	#parameter for init script
	local cur
	local dynamic_domains

	if [ -f /var/run/resolver.name ]; then
	#special handling when running resolver is
	#different from prefered resolver

		cur=$(cat /var/run/resolver.name|tr -d  "\n")
		if [ "$param" == "stop" ]; then
			pref=$cur
		elif [ "$param" == "reload" ]; then
			if [ "$pref" != "$cur" ]; then
				/etc/init.d/$cur stop
				param="start"
			fi
		fi
	fi

	if [ "$pref" == "kresd" ]; then
		if [ -e /etc/init.d/kresd ]; then
			/etc/init.d/kresd $param
			LAST_SERVICE=kresd
			echo "Called /etc/init.d/kresd $param"
		elif [ -e /etc/init.d/unbound ]; then
			/etc/init.d/unbound $param
			LAST_SERVICE=unbound
			echo "Called /etc/init.d/unbound $param"
		else
			echo "Error! kresd and unbound not found !"
			exit 1
		fi
	elif [ "$pref" == "unbound" ]; then
		if [ -e /etc/init.d/unbound ]; then
			/etc/init.d/unbound $param
			LAST_SERVICE=unbound
			echo "Called /etc/init.d/unbound $param"
		elif [ -e /etc/init.d/kresd ]; then
			/etc/init.d/kresd $param
			LAST_SERVICE=kresd
			echo "Called /etc/init.d/kresd $param"
		else
			echo "Error! kresd and unbound not found !"
			exit 1
		fi
	fi

	#check dnsmasq resolver
	if [ "$pref" == "dnsmasq" ]; then
		LAST_SERVICE=dnsmasq
	else
		#run script to refresh dynamic domains
		to_version=$(cat /etc/turris-version |awk -F'.' '{print $1}')
		config_load resolver
		config_get_bool dynamic_domains "common" dynamic_domains 0
		if [ "$dynamic_domains" == "1" ]; then
			echo "set dhcp script"
			if [ $to_version -le 3 ]; then
				#call only in case of old TO system 3.x
				set_dhcp_script
			fi

			run_dhcp_script $param $LAST_SERVICE
		else
			echo "remove dhcp script"
			remove_dhcp_script
		fi
	fi
}

save_resolver_info() {
	local pid_num
	config_load resolver
	rm -f /var/run/resolver.pid
	if [ "$LAST_SERVICE" == "unbound" ]; then
		config_get pidfile common pidfile /var/run/unbound.pid
		[ -f "$pidfile" ] && cp $pidfile /var/run/resolver.pid
	elif [ "$LAST_SERVICE" == "dnsmasq" ]; then
		ln -s /var/run/dnsmasq/dnsmasq.pid /var/run/resolver.pid
	else #kresd
		sleep 1
		pid_num=$(pidof kresd|awk '{print $1}')
		echo $pid_num>/var/run/resolver.pid
	fi
	echo $LAST_SERVICE>/var/run/resolver.name
}

start() {
	run_cmd start $PREF_RESOLVER
	save_resolver_info
}

stop() {
	run_cmd stop $PREF_RESOLVER
	rm -f /var/run/resolver.pid
}

reload() {
	run_cmd reload $PREF_RESOLVER
	save_resolver_info
}

