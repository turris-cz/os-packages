Index: pakon-1.3.1/monitor.py
===================================================================
--- pakon-1.3.1.orig/monitor.py
+++ pakon-1.3.1/monitor.py
@@ -190,10 +190,29 @@ def new_device_notify(mac, iface):
     thread.start()
 
 def handle_dns(data, con):
-    if data['dns']['type'] == 'answer' and 'rrtype' in data['dns'].keys() and data['dns']['rrtype'] in ('A', 'AAAA', 'CNAME'):
-        logging.debug('Saving DNS data')
-        dev, mac=get_dev_mac(data['dest_ip'])
-        dns_cache.set(mac, data['dns']['rrname'], data['dns']['rdata'])
+    version = data["dns"].get("version", 1)
+    match version:
+        case 1:
+            if (
+                data["dns"]["type"] == "answer"
+                and "rrtype" in data["dns"].keys()
+                and data["dns"]["rrtype"] in ("A", "AAAA", "CNAME")
+            ):
+                dev, mac = get_dev_mac(data["dest_ip"])
+                logging.debug("Saving DNS data")
+                dns_cache.set(mac, data["dns"]["rrname"], data["dns"]["rrname"])
+        case 2 | 3:
+            if "answers" not in data["dns"].keys():
+                return
+            dev, mac = get_dev_mac(data["dest_ip"])
+            for answer in data["dns"]["answers"]:
+                if answer["rrtype"] in ("A", "AAAA", "CNAME"):
+                    logging.debug("Saving DNS data")
+                    dns_cache.set(mac, answer["rrname"], answer["rdata"])
+        case _:
+            logging.error("Invalid Suricata API version: " + str(version))
+            sys.exit(1)
+
 
 def handle_flow(data, con):
     if data['proto'] not in ['TCP', 'UDP']:
