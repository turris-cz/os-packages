#!/bin/sh /etc/rc.common

START=99
STOP=01

start() {
    [ "$(uci get foris.wizard.finished)" != 1 ] || exit 0

    # Check WAN port
    ip link set up dev eth0
    sleep 2
    if [ "$(cat /sys/class/net/eth0/carrier)" -eq 1 ]; then
        uci set "network.wan.device=eth0"
        uci commit network
    else
        uci set "network.wan.device=eth4"
        uci commit network
    fi

    # Make sure we have wireless config
    wifi config

    # Check whether there is already a Wi-Fi password, otherwise generate one
    PASSWORD="$(uci get wireless.@wifi-iface[0].key)"
    [ -n "$PASSWORD" ] || PASSWORD="$(tr -dc A-NP-Za-z1-9 < /dev/urandom | head -c 16)"

    # Set password and enable all Wi-Fi networks
    i=0
    SSID="Turris-$(printf %d 0x$(crypto-wrapper serial | tail -c 4))"
    while [ "$(uci get "wireless.@wifi-iface[$i]" 2> /dev/null)" = wifi-iface ]; do
        uci set "wireless.@wifi-iface[$i].ssid"="$SSID"
        uci set "wireless.@wifi-iface[$i].key"="$PASSWORD"
        uci set "wireless.@wifi-iface[$i].encryption"="sae-mixed"
        uci set "wireless.@wifi-iface[$i].disabled"=0
        uci set "wireless.$(uci get "wireless.@wifi-iface[$i].device").disabled"=0
        i=$((i + 1))
    done
    uci commit wireless

    # Reload Wi-Fi configuration
    wifi

    # Try to pretend to be a captive portal
    /etc/init.d/resovler restart
    lan_ip="$(ifstatus lan | jsonfilter -e '@["ipv4-address"][0].address')"
    PORTALS="
        connectivitycheck.gstatic.com
        detectportal.firefox.com
        clients3.google.com
        www.msftconnecttest.com
        www.msftncsi.com
        www.apple.com
        gsp1.apple.com
        captive.apple.com
    "

    {
    echo "hints.ttl(5)"
    for zone in $PORTALS; do
        echo "hints.set(\"$zone $lan_ip\")"
    done
    } | socat - /tmp/kresd/control/*

    # Reload knot when wizard finishes
    {
        while [ "$(uci get foris.wizard.finished 2> /dev/null)" != 1 ]; do
            sleep 1
        done
        /etc/init.d/resolver restart
        /etc/init.d/network restart
        wifi
    } &
}

stop() {
    /etc/init.d/resolver restart
}
